---
import '../styles/global.css' 
---

<style>
  body {
    background: oklch(12.9% 0.042 264.695);
    background-image: radial-gradient(oklch(27.9% 0.041 260.031) 2px, transparent 0);
    background-size: 40px 40px;
    background-position: -19px -19px;
  }
</style>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>UNDERNET MEMORY RECONSTRUCTOR</title>
  
</head>
<body class="justify-center text-center items-center align-middle w-screen h-svh flex flex-col bg-sla font-hack text-white">
  <div class="p-10 bg-slate-700/20 backdrop-blur-xs rounded-2xl outline outline-slate-500">
    <div class="upload-section" id="uploadSection">
      <form class="upload-form" id="uploadForm">
        <div class="form-group">
          <label for="submitterName" class="italic text-lg mb-1">name (public)</label>
          <br>
          <input type="text" id="submitterName" placeholder="orpheus" required class="bg-slate-700/20 backdrop-blur-xs rounded-full outline outline-slate-500 p-1 px-3 mb-3 bottom-4">
        </div>
        <div class="form-group">
          <label for="fileUpload" class="italic text-lg mb-1">memory fragment</label>
          <br>
          <input type="file" id="fileUpload" accept=".txt" required class="file:bg-slate-700/20 file:backdrop-blur-xs file:rounded-full file:outline file:outline-slate-500 file:p-1 file:m-1 file:mr-3 file:px-3 bg-slate-700/10 backdrop-blur-xs rounded-full outline outline-slate-500 p-1 flex align-middle mb-3">
        </div>
        <button type="submit" id="submitBtn" class="font-bold italic text-2xl bg-slate-700/20 backdrop-blur-xs rounded-full outline outline-slate-500 p-3 px-4 mt-7 hover:bg-blue-600/50 transition-all">
          RECONSTRUCT MEMORY
        </button>
      </form>
    </div>


  </div>

  <div class="status-bar absolute italic bg-slate-700/20 backdrop-blur-xs rounded-full outline outline-slate-500 p-4 bottom-4" id="statusBar">
    [waiting for fragments]
  </div>



  <script>
    const FRAGMENT_SETS = [
      'VIRAL', 'DREAM', 'DESIGN', 'LIVE', 'SAIL', 'ADVENTURE', 'HIKE', 'BUILD'
    ];

    let reconstructionData = {};
    let completedSets = [];
    let submissionsLocked = false;

    function initializeReconstructionData() {
      FRAGMENT_SETS.forEach(setName => {
        reconstructionData[setName] = {
          fragments: {},
          complete: false
        };
      });
    }




    function checkSetCompletion(setName) {
      const setData = reconstructionData[setName];
      const fragmentCount = Object.keys(setData.fragments).length;
      
      if (fragmentCount === 5 && !setData.complete) {
        setData.complete = true;
        completedSets.push(setName);
        
        const setContainer = document.getElementById(`set-${setName}`);
        setContainer.classList.add('complete');
        
        sortFragmentsInSet(setName);
        
        showSetCompletionMessage(setName);
        
        updateStatusBar();
        
        if (completedSets.length >= 3) {
          setTimeout(() => {
            triggerFinalSequence();
          }, 2000);
        }
      }
    }

    function sortFragmentsInSet(setName) {
      const fragments = document.querySelector(`#set-${setName} .fragments`);
      const fragmentElements = Array.from(fragments.children);
      
      fragmentElements.sort((a, b) => {
        const aId = a.id;
        const bId = b.id;
        const aNum = parseInt(aId.split('-')[1]);
        const bNum = parseInt(bId.split('-')[1]);
        return aNum - bNum;
      });
      
      fragments.innerHTML = '';
      fragmentElements.forEach(element => {
        fragments.appendChild(element);
      });
      
      fragmentElements.forEach((element, index) => {
        element.style.animation = `fragmentSort 0.8s ease-out ${index * 0.1}s`;
      });
    }

    function showSetCompletionMessage(setName) {
      const statusBar = document.getElementById('statusBar');
      const originalBg = statusBar.style.background;
      
      statusBar.textContent = `{memory ${setName} reconstructed}`;
      statusBar.style.background = 'rgba(255, 255, 0, 0.3)';
      statusBar.style.animation = 'setCompleteFlash 2s ease-out';
      
      setTimeout(() => {
        statusBar.style.animation = '';
        statusBar.style.background = originalBg;
        updateStatusBar();
      }, 2000);
    }

    function updateStatusBar() {
      const statusBar = document.getElementById('statusBar');
      
      if (completedSets.length === 0) {
        statusBar.textContent = '[waiting for fragments]';
      } else if (completedSets.length < 3) {
        statusBar.textContent = `[${completedSets.length}/3 memories complete: ${completedSets.join(', ')}]`;
      } else {
        statusBar.textContent = '[initiating orpheus protocol...]';
      }
    }

    function triggerFinalSequence() {
      submissionsLocked = true;
      
      const uploadSection = document.getElementById('uploadSection');
      uploadSection.style.animation = 'fadeOut 1s ease-out';
      setTimeout(() => {
        uploadSection.style.display = 'none';
      }, 1000);
    }

    function createScreenFlash() {
      const flash = document.createElement('div');
      flash.style.position = 'fixed';
      flash.style.top = '0';
      flash.style.left = '0';
      flash.style.width = '100%';
      flash.style.height = '100%';
      flash.style.background = 'rgba(255, 255, 255, 0.8)';
      flash.style.zIndex = '9999';
      flash.style.animation = 'screenFlash 0.5s ease-out';
      document.body.appendChild(flash);
      
      setTimeout(() => {
        flash.remove();
      }, 500);
    }

    async function handleFileUpload(event) {
      event.preventDefault();
      
      if (submissionsLocked) {
        alert('SUBMISSIONS LOCKED - ORPHEUS PROTOCOL ACTIVE');
        return;
      }
      
      const submitterName = document.getElementById('submitterName').value.trim();
      const fileInput = document.getElementById('fileUpload');
      const file = fileInput.files[0];
      
      if (!submitterName || !file) {
        alert('MISSING DATA - AGENT DESIGNATION AND FRAGMENT REQUIRED');
        return;
      }
      
      try {
        const fileContent = await readFileContent(file);
        const fragmentData = fileContent.trim();
        
        const match = fragmentData.match(/^([A-Z]+)(\d+)$/);
        
        if (!match) {
          alert('INVALID FRAGMENT FORMAT - EXPECTED FORMAT: SETNAME+NUMBER');
          return;
        }
        
        const [, setName, numberStr] = match;
        const number = parseInt(numberStr);
        
        if (!FRAGMENT_SETS.includes(setName) || number < 1 || number > 5) {
          alert('UNKNOWN FRAGMENT TYPE - FRAGMENT REJECTED');
          return;
        }
        
        if (reconstructionData[setName].fragments[number]) {
          alert(`FRAGMENT ${setName}${number} ALREADY RECONSTRUCTED`);
          return;
        }
        
        const isFirstFragment = Object.keys(reconstructionData[setName].fragments).length === 0;
        
        reconstructionData[setName].fragments[number] = {
          submitter: submitterName,
          filename: file.name,
          timestamp: Date.now()
        };
        

        
        document.getElementById('uploadForm').reset();
        
        showSuccessMessage(`FRAGMENT ${setName}${number} ACCEPTED - AGENT ${submitterName}`);
        
      } catch (error) {
        console.error('Upload error:', error);
        alert('UPLOAD FAILED - FRAGMENT CORRUPTED');
      }
    }

    function readFileContent(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = e => resolve(e.target.result);
        reader.onerror = reject;
        reader.readAsText(file);
      });
    }

    function showSuccessMessage(message) {
      const statusBar = document.getElementById('statusBar');
      const originalText = statusBar.textContent;
      const originalBg = statusBar?.style.background
      
      statusBar.textContent = message;
      statusBar.style.background = 'rgba(0, 255, 136, 0.3)';
      
      setTimeout(() => {
        updateStatusBar();
        statusBar.style.background = originalBg;
      }, 3000);
    }

    function initialize() {
      initializeReconstructionData();
      
      document.getElementById('uploadForm').addEventListener('submit', handleFileUpload);
      
      updateStatusBar();
    }

    initialize();
  </script>
</body>
</html>
